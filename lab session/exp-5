from collections import deque
from typing import List

def updateMatrix(mat: List[List[int]]) -> List[List[int]]:
    m, n = len(mat), len(mat[0])
    # Initialize distance matrix with inf and 0s for the original mat
    dist = [[float('inf')] * n for _ in range(m)]
    queue = deque()

    # Enqueue all 0 cells and set their distance to 0
    for i in range(m):
        for j in range(n):
            if mat[i][j] == 0:
                dist[i][j] = 0
                queue.append((i, j))

    # Directions array for moving up, down, left, right
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]

    # Process the queue
    while queue:
        x, y = queue.popleft()

        for dx, dy in directions:
            nx, ny = x + dx, y + dy

            # If within bounds and we found a shorter distance
            if 0 <= nx < m and 0 <= ny < n:
                if dist[nx][ny] > dist[x][y] + 1:
                    dist[nx][ny] = dist[x][y] + 1
                    queue.append((nx, ny))

    return dist

# Example usage
mat1 = [[0, 0, 0], [0, 1, 0], [0, 0, 0]]
output1 = updateMatrix(mat1)
print(output1)  # Output: [[0, 0, 0], [0, 1, 0], [0, 0, 0]]

mat2 = [[0, 0, 0], [0, 1, 0], [1, 1, 1]]
output2 = updateMatrix(mat2)
print(output2)  # Output: [[0, 0, 0], [0, 1, 0], [1, 2, 1]]
