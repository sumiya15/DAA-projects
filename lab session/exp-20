import heapq
from typing import List

def find_kth_largest(nums: List[int], k: int) -> int:
    # Create a min-heap with the first k elements
    heap = nums[:k]
    heapq.heapify(heap)  # O(k)
    
    # Iterate through the remaining elements
    for num in nums[k:]:
        if num > heap[0]:  # Compare with the smallest element in the heap
            heapq.heappushpop(heap, num)  # Push the new number and pop the smallest element
    
    # The root of the heap is the kth largest element
    return heap[0]

# Example usage
nums1 = [3, 2, 1, 5, 6, 4]
k1 = 2
print(find_kth_largest(nums1, k1))  # Output: 5

nums2 = [3, 2, 3, 1, 2, 4, 5, 5, 6]
k2 = 4
print(find_kth_largest(nums2, k2))  # Output: 4
