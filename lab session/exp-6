from heapq import heappop, heappush
from typing import List, Optional

class ListNode:
    def __init__(self, val: int = 0, next: Optional['ListNode'] = None):
        self.val = val
        self.next = next

    def __repr__(self):
        return f"{self.val} -> {self.next}"  # For easier debugging

def merge_k_lists(lists: List[Optional[ListNode]]) -> Optional[ListNode]:
    # Initialize the min-heap
    heap = []
    
    # Populate the heap with the head node of each list
    for i, node in enumerate(lists):
        if node:  # Only add non-null nodes
            heappush(heap, (node.val, i, node))
    
    # Create a dummy node to serve as the start of the merged list
    dummy = ListNode(0)
    current = dummy
    
    while heap:
        # Pop the smallest node from the heap
        val, i, node = heappop(heap)
        
        # Add the smallest node to the merged list
        current.next = node
        current = current.next
        
        # If there is a next node in the list, add it to the heap
        if node.next:
            heappush(heap, (node.next.val, i, node.next))
    
    # Return the merged list, starting from the next node after the dummy
    return dummy.next

# Helper function to convert a list of lists to a list of ListNode
def build_linked_lists(arrays: List[List[int]]) -> List[Optional[ListNode]]:
    list_nodes = []
    for array in arrays:
        dummy = ListNode(0)
        current = dummy
        for value in array:
            current.next = ListNode(value)
            current = current.next
        list_nodes.append(dummy.next)
    return list_nodes

# Helper function to convert a ListNode to a list for easy comparison
def linked_list_to_list(node: ListNode) -> List[int]:
    result = []
    while node:
        result.append(node.val)
        node = node.next
    return result

# Example usage
lists = [[1, 4, 5], [1, 3, 4], [2, 6]]
linked_lists = build_linked_lists(lists)
merged_list = merge_k_lists(linked_lists)
print(linked_list_to_list(merged_list))  # Output: [1, 1, 2, 3, 4, 4, 5, 6]
