class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def sort_list(head: ListNode) -> ListNode:
    # Base case: if the list is empty or contains a single node
    if not head or not head.next:
        return head
    
    # Step 1: Find the middle of the linked list
    def find_middle(head):
        slow = head
        fast = head
        prev = None
        while fast and fast.next:
            prev = slow
            slow = slow.next
            fast = fast.next.next
        # Cut the list into two halves
        if prev:
            prev.next = None
        return slow

    # Step 2: Merge two sorted lists
    def merge(l1, l2):
        dummy = ListNode(0)
        current = dummy
        
        while l1 and l2:
            if l1.val < l2.val:
                current.next = l1
                l1 = l1.next
            else:
                current.next = l2
                l2 = l2.next
            current = current.next
        
        # Append the remaining elements
        current.next = l1 if l1 else l2
        
        return dummy.next

    # Find the middle of the list
    middle = find_middle(head)
    
    # Recursively sort the two halves
    left = sort_list(head)
    right = sort_list(middle)
    
    # Merge the sorted halves
    return merge(left, right)

# Helper function to create a linked list from a list
def create_linked_list(values):
    if not values:
        return None
    head = ListNode(values[0])
    current = head
    for value in values[1:]:
        current.next = ListNode(value)
        current = current.next
    return head

# Helper function to convert a linked list to a list
def linked_list_to_list(head):
    result = []
    current = head
    while current:
        result.append(current.val)
        current = current.next
    return result

# Example usage
head = create_linked_list([4, 2, 1, 3])
sorted_head = sort_list(head)
print(linked_list_to_list(sorted_head))  # Output: [1, 2, 3, 4]
