class ListNode:
    def _init_(self, val=0, next=None):
        self.val = val
        self.next = next
def removeNthFromEnd(head: ListNode, n: int) -> ListNode:
    dummy = ListNode(0, head)   
    first = dummy
    second = dummy
    for _ in range(n + 1):
        first = first.next    
    while first is not None:
        first = first.next
        second = second.next   
    second.next = second.next.next  
    return dummy.next
def list_to_linkedlist(arr):
    if not arr:
        return None
    head = ListNode(arr[0])
    current = head
    for val in arr[1:]:
        current.next = ListNode(val)
        current = current.next
    return head
def linkedlist_to_list(node):
    arr = []
    while node:
        arr.append(node.val)
        node = node.next
    return arr
head = list_to_linkedlist([1, 2, 3, 4, 5])
n = 2
new_head = removeNthFromEnd(head, n)
print(linkedlist_to_list(new_head)) 
