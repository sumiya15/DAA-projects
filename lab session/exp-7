from bisect import bisect_right
from typing import List

def min_operations_to_make_increasing(arr1: List[int], arr2: List[int]) -> int:
    arr2 = sorted(set(arr2))  # Sort and deduplicate arr2
    
    n = len(arr1)
    m = len(arr2)
    
    # Initialize a dictionary to hold the minimum operations for each possible ending value
    dp = {-1: 0}  # Use -1 as a dummy starting value with 0 operations
    
    for num in arr1:
        temp = {}
        
        for key in dp:
            # If not replacing the current number
            if num > key:
                if num in temp:
                    temp[num] = min(temp[num], dp[key])
                else:
                    temp[num] = dp[key]
            
            # If replacing the current number
            idx = bisect_right(arr2, key)
            if idx < m:
                if arr2[idx] in temp:
                    temp[arr2[idx]] = min(temp[arr2[idx]], dp[key] + 1)
                else:
                    temp[arr2[idx]] = dp[key] + 1
        
        dp = temp
    
    if dp:
        return min(dp.values())
    else:
        return -1

# Example usage
arr1 = [1, 5, 3, 6, 7]
arr2 = [1, 3, 2, 4]
print(min_operations_to_make_increasing(arr1, arr2))  # Output: 1
