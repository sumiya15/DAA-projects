from typing import List

def wiggleSort(nums: List[int]) -> None:
    # Sort the array to find the median
    nums.sort()
    n = len(nums)
    
    # Find the middle index for the median
    mid = (n - 1) // 2
    
    # Use a copy of the sorted array to avoid modifying the original during assignment
    sorted_nums = nums[:]
    
    # Three-way partition using virtual indexing
    left = sorted_nums[:mid + 1]  # Smaller half (including median)
    right = sorted_nums[mid + 1:]  # Larger half
    
    # We need to put elements in the "wiggle" order
    # We will fill from the end to the beginning to avoid overwriting elements
    
    # Fill the odd indices first (1, 3, 5, ...) with the larger half
    nums[1::2] = right[::-1]
    # Fill the even indices (0, 2, 4, ...) with the smaller half
    nums[0::2] = left[::-1]

# Example usage
nums1 = [1, 5, 1, 1, 6, 4]
wiggleSort(nums1)
print(nums1)  # Output could be: [1, 6, 1, 5, 1, 4]

nums2 = [1, 3, 2, 2, 3, 1]
wiggleSort(nums2)
print(nums2)  # Output could be: [2, 3, 1, 3, 1, 2]
