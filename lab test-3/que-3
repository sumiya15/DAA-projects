import heapq

class Node:
    def __init__(self, char=None, freq=0):
        self.char = char
        self.freq = freq
        self.left = None
        self.right = None

    def __lt__(self, other):
        return self.freq < other.freq

def build_huffman_tree(characters, frequencies):
    heap = [Node(char, freq) for char, freq in zip(characters, frequencies)]
    heapq.heapify(heap)
    
    while len(heap) > 1:
        node1 = heapq.heappop(heap)
        node2 = heapq.heappop(heap)
        
        merged_node = Node(freq=node1.freq + node2.freq)
        merged_node.left = node1
        merged_node.right = node2
        
        heapq.heappush(heap, merged_node)
    
    return heap[0]

def generate_huffman_codes(root):
    codes = {}
    
    def generate_codes_helper(node, current_code):
        if node is None:
            return
        
        if node.char is not None:
            codes[node.char] = current_code
        
        generate_codes_helper(node.left, current_code + '0')
        generate_codes_helper(node.right, current_code + '1')
    
    generate_codes_helper(root, "")
    return codes

# Test Case 1
characters1 = ['a', 'b', 'c', 'd']
frequencies1 = [5, 9, 12, 13]
root1 = build_huffman_tree(characters1, frequencies1)
huffman_codes1 = generate_huffman_codes(root1)
print("Test Case 1 Huffman Codes:", sorted(huffman_codes1.items()))  # Expected Output: [('a', '110'), ('b', '10'), ('c', '0'), ('d', '111')]

# Test Case 2
characters2 = ['f', 'e', 'd', 'c', 'b', 'a']
frequencies2 = [5, 9, 12, 13, 16, 45]
root2 = build_huffman_tree(characters2, frequencies2)
huffman_codes2 = generate_huffman_codes(root2)
print("Test Case 2 Huffman Codes:", sorted(huffman_codes2.items()))  # Expected Output: [('a', '0'), ('b', '101'), ('c', '100'), ('d', '111'), ('e', '1101'), ('f', '1100')]
