def decode_huffman(root, encoded_string):
    decoded_message = []
    current_node = root
    
    for bit in encoded_string:
        if bit == '0':
            current_node = current_node.left
        elif bit == '1':
            current_node = current_node.right
        
        if current_node.char is not None:
            decoded_message.append(current_node.char)
            current_node = root
    
    return ''.join(decoded_message)

# Decoding Test Case 1
encoded_string1 = '1101100111110'
decoded_message1 = decode_huffman(root1, encoded_string1)
print("Test Case 1 Decoded Message:", decoded_message1)  # Expected Output: "abacd"

# Decoding Test Case 2
encoded_string2 = '110011011100101111001011'
decoded_message2 = decode_huffman(root2, encoded_string2)
print("Test Case 2 Decoded Message:", decoded_message2)  # Expected Output: "fcbade"
